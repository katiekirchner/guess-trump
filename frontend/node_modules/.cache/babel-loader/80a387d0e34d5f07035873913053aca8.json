{"ast":null,"code":"var _jsxFileName = \"/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js\";\nimport React, { Component, useState, useEffect } from 'react'; // import React from 'react';\n\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\nvar shuffle = require('shuffle-array');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fakeTweet: \" \",\n      tweet1: \" \",\n      tweet2: \" \",\n      correct: 0,\n      total: 0,\n      accuracy: 0,\n      allTweets: [\" \", \" \", \" \"]\n    };\n  } // state = {\n  //   fakeTweet: \" \",\n  //   tweet1: \" \",\n  //   tweet2: \" \",\n  //   correct: 0,\n  //   total: 0,\n  //   accuracy: 0,\n  //   allTweets: [\" \", \" \", \" \"]  \n  // };\n\n\n  componentDidMount() {\n    this.getTweets();\n    this.renderTweetBox();\n    this.getTweets();\n  }\n\n  getTweets() {\n    console.log(\"Get tweets\");\n    fetch('/tweet').then(res => res.json()).then(data => {\n      this.setState({\n        fakeTweet: \"FAKE!! -- \" + data.tweet\n      });\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.setState({\n        tweet1: data.random\n      });\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.setState({\n        tweet2: data.random\n      });\n      console.log(\"hhhh1 \", this.state.fakeTweet);\n      this.test();\n    }); // console.log(\"hhhh \", this.state.fakeTweet);\n  }\n\n  test() {\n    // console.log(\"hhhh \", this.state.fakeTweet);\n    this.setState({\n      allTweets: [this.state.fakeTweet, this.state.tweet1, this.state.tweet2]\n    });\n    shuffle(this.state.allTweets);\n    console.log(\"hhhh \", this.state.allTweets);\n  }\n\n  counter(value) {\n    // console.log(value == this.state.fakeTweet)\n    // if (value === this.state.fakeTweet){\n    //   this.setState({correct: this.state.correct+1});\n    // }\n    // this.setState({total: this.state.total+1});\n    // this.setAccuracy();\n    console.log(this.state.allTweets[value]);\n    console.log(this.state.fakeTweet);\n    console.log(this.state.allTweets[value] == this.state.fakeTweet);\n\n    if (this.state.allTweets[value] === this.state.fakeTweet) {\n      this.setState({\n        correct: this.state.correct + 1\n      });\n    }\n\n    this.setState({\n      total: this.state.total + 1\n    });\n    this.setAccuracy(); // this.getTweets();\n    // this.renderTweetBox();\n  }\n\n  setAccuracy() {\n    var num = this.state.total === 0 ? 0 : (this.state.correct / this.state.total * 100).toPrecision(4);\n    this.setState({\n      accuracy: num\n    });\n  }\n\n  renderTweetBox() {\n    // var test = [];\n    // test[0] = this.state.fakeTweet;\n    // test[1] = this.state.tweet1;\n    // test[2] = this.state.tweet2;\n    // var test = [this.state.fakeTweet, this.state.tweet1, this.state.tweet2];\n    // shuffle(test);\n    console.log(\"render tweetbox\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tweet-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: bird,\n      className: \"trump-bird\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, \"Using a corpus of the entire collection of Donald Trump's Tweets, this app generates a Markov chain.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }, \"From the Markov model, a sentence (or Tweet in this case) is created.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }\n    }, \"The fake Tweet generated from the Markov chain is placed amongst two real Tweets randomly selected from Donald Trump's entire Tweet history.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, \"Can you pick the fake Tweet?\")), this.renderTweetBox(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"acc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }, \"Accuracy: \", this.state.accuracy, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, \"Correct: \", this.state.correct, \"\\xA0\\xA0\\xA0 Total: \", this.state.total), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"reload-button\",\n      onClick: () => this.getTweets(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, \" Reload \"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js"],"names":["React","Component","useState","useEffect","bird","TweetBox","shuffle","require","App","constructor","props","state","fakeTweet","tweet1","tweet2","correct","total","accuracy","allTweets","componentDidMount","getTweets","renderTweetBox","console","log","fetch","then","res","json","data","setState","tweet","random","test","counter","value","setAccuracy","num","toPrecision","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\n// import React from 'react';\n\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\nvar shuffle = require('shuffle-array');\n\n\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        fakeTweet: \" \",\n        tweet1: \" \",\n        tweet2: \" \",\n\n        correct: 0,\n        total: 0,\n        accuracy: 0,\n        allTweets: [\" \", \" \", \" \"]  \n      };\n    }\n\n  \n\n    // state = {\n    //   fakeTweet: \" \",\n    //   tweet1: \" \",\n    //   tweet2: \" \",\n\n    //   correct: 0,\n    //   total: 0,\n    //   accuracy: 0,\n    //   allTweets: [\" \", \" \", \" \"]  \n    // };\n  \n    \n\n    componentDidMount(){\n      \n      this.getTweets();\n      this.renderTweetBox();\n\n      this.getTweets();\n\n   }\n\n\n\n\n\n    getTweets(){\n\n      console.log(\"Get tweets\")\n        fetch('/tweet').then(res => res.json()).then(data => {\n          this.setState({fakeTweet: \"FAKE!! -- \" + data.tweet});\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.setState({tweet1: data.random});\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.setState({tweet2: data.random});\n          console.log(\"hhhh1 \", this.state.fakeTweet);\n\n          this.test();\n        });\n\n\n        // console.log(\"hhhh \", this.state.fakeTweet);\n\n    }\n\n\n  \n\n    test(){\n      // console.log(\"hhhh \", this.state.fakeTweet);\n\n\n\n       this.setState({allTweets: [this.state.fakeTweet, this.state.tweet1, this.state.tweet2]});\n\n\n        shuffle(this.state.allTweets);\n\n        console.log(\"hhhh \", this.state.allTweets);\n\n    }\n\n\n    counter(value){\n \n      // console.log(value == this.state.fakeTweet)\n\n      // if (value === this.state.fakeTweet){\n      //   this.setState({correct: this.state.correct+1});\n      // }\n\n      // this.setState({total: this.state.total+1});\n      // this.setAccuracy();\n\n      console.log(this.state.allTweets[value])\n      console.log(this.state.fakeTweet)\n\n\n      console.log(this.state.allTweets[value] == this.state.fakeTweet)\n\n      if (this.state.allTweets[value] === this.state.fakeTweet){\n        this.setState({correct: this.state.correct+1});\n      }\n\n      this.setState({total: this.state.total+1});\n      this.setAccuracy();\n\n\n      // this.getTweets();\n      // this.renderTweetBox();\n    }\n\n    setAccuracy(){\n      \n      var num = (this.state.total === 0) ? 0 : (((this.state.correct/this.state.total)*100).toPrecision(4));\n      this.setState({accuracy: num});\n    }\n\n \n\n    renderTweetBox(){\n      // var test = [];\n      // test[0] = this.state.fakeTweet;\n      // test[1] = this.state.tweet1;\n      // test[2] = this.state.tweet2;\n\n      // var test = [this.state.fakeTweet, this.state.tweet1, this.state.tweet2];\n\n\n      // shuffle(test);\n\n\n      console.log(\"render tweetbox\");\n\n        return (\n            <div className=\"tweet-container\">   \n                {/* <div onClick={()=> this.counter(test[0])}>\n                  <TweetBox text={test[0]}/>\n                </div> \n\n                <div onClick={()=> this.counter(test[1])}>\n                  < TweetBox text={test[1]}/>\n                </div>\n\n                <div onClick={()=> this.counter(test[3])}>\n                  <TweetBox text={test[2]}/>\n                </div> */}\n\n\n\n              <div onClick={()=> this.counter(0)}>\n                <TweetBox text={this.state.allTweets[0]}/>\n              </div> \n\n              <div onClick={()=> this.counter(1)}>\n                < TweetBox text={this.state.allTweets[1]}/>\n              </div>\n\n              <div onClick={()=> this.counter(2)}>\n                <TweetBox text={this.state.allTweets[2]}/>\n              </div>\n            </div>\n          );\n        \n    }\n\n\n\n\n\n\n    render (){\n\n\n      return (\n\n          <div className=\"App\">\n            <header className=\"header\">\n              <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n            </header>\n\n\n            <div className=\"grid-container\">\n                <div className=\"left-panel\">\n                  <p className=\"desc\">\n                    Using a corpus of the entire collection of\n                    Donald Trump's Tweets, this app generates a Markov chain. \n                  </p>\n\n                  <p className=\"desc\">\n                    From the Markov model, a sentence (or Tweet in this case)\n                    is created.\n\n                  </p>\n\n                  <p className=\"desc\">\n                    The fake Tweet generated from the Markov chain is placed\n                    amongst two real Tweets randomly selected from Donald Trump's \n                    entire Tweet history.\n                  </p>\n\n                  <p className=\"desc\">\n                  Can you pick the fake Tweet?\n                  </p>\n\n                </div>\n\n                {/* <div className=\"tweet-container\">   \n                    <div onClick={()=> this.counter(test[0])}>\n                      <TweetBox text={test[0]}/>\n                    </div> \n\n                    <div onClick={()=> this.counter(test[1])}>\n                      < TweetBox text={test[1]}/>\n                    </div>\n\n                    <div onClick={()=> this.counter(test[3])}>\n                      <TweetBox text={test[2]}/>\n                    </div>\n\n                 </div> */}\n\n                {this.renderTweetBox()}\n\n                <div className=\"right-panel\">\n                    <p className=\"acc\">\n                      Accuracy: {this.state.accuracy}%\n                    </p>\n                    <p>\n                      Correct: {this.state.correct}  \n                      &nbsp;&nbsp;&nbsp;  \n                      Total: {this.state.total} \n                    </p>\n\n                    <br></br>\n                    {/* <button className=\"reload-button\" onClick={() => this.componentDidMount()}> Reload </button>       */}\n\n                    <button className=\"reload-button\" onClick={() => this.getTweets()}> Reload </button>      \n                 \n                </div>\n\n              </div>\n          </div>\n      );\n    }\n  } \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}