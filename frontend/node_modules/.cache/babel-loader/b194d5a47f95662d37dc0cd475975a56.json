{"ast":null,"code":"import _classCallCheck from\"/Users/katiekirchner/Sites/guesstrumptweet/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/katiekirchner/Sites/guesstrumptweet/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/katiekirchner/Sites/guesstrumptweet/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/katiekirchner/Sites/guesstrumptweet/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,useState,useEffect}from'react';import'./css/App.css';import bird from'./component/trumpBird1.png';import TweetBox from'./component/tweetBox';// function App() {\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n//   const [allTweets, setAllTweets] = useState([]);\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n//   function returnTest(){\n//     return (allTweets);\n//   }\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n//             <p>Total: {total} </p>\n//           </div>\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n//         </div>\n//     </div>\n//   );\n// }\nvar App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={fakeTweet:'',correct:0,total:0,accuracy:0,allTweets:[]};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){this.getTweets();// fetch('/tweet').then(res => res.json()).then(data => {\n//   // this.setState({fakeTweet: data.tweet});\n//   this.state.allTweets.push(data.tweet);\n// });\n// fetch('/random').then(res => res.json()).then(data => {\n//   this.state.allTweets.push(data.random);\n// });\n// fetch('/random').then(res => res.json()).then(data => {\n//   this.state.allTweets.push(data.random);\n// });\n// console.log(this.state.allTweets)\n}},{key:\"getTweets\",value:function getTweets(){var _this2=this;fetch('/tweet').then(function(res){return res.json();}).then(function(data){_this2.setState({fakeTweet:data.tweet});// this.setState({allTweets[0]: data.tweet})\n_this2.state.allTweets[0]=data.tweet;});fetch('/random').then(function(res){return res.json();}).then(function(data){_this2.state.allTweets[1]=data.random;});fetch('/random').then(function(res){return res.json();}).then(function(data){_this2.state.allTweets[2]=data.random;});// this.state.allTweets.sort(() => 0.5 - Math.random());\n// this.state.allTweets.push(this.state.fakeTweet);\n// this.setState(_.shuffle(this.state.allTweets));\n// setAllTweets([fakeTweet, random, random2]);\n}},{key:\"counter\",value:function counter(num){if(this.state.allTweets[num]===this.state.fakeTweet){this.setState({correct:this.state.correct+1});}this.setState({total:this.state.total+1});this.setAccuracy();}},{key:\"setAccuracy\",value:function setAccuracy(){var num=this.state.total===0?0:(this.state.correct/this.state.total*100).toPrecision(4);this.setState({accuracy:num});}},{key:\"renderTweetBox\",value:function renderTweetBox(){var _this3=this;console.log(this.state.allTweets);// this.getTweets();\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"tweet-container\"},/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this3.counter(0);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[0]})),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this3.counter(1);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[1]})),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this3.counter(2);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[2]})));}},{key:\"render\",value:function render(){var _this4=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"header\",{className:\"header\"},/*#__PURE__*/React.createElement(\"img\",{src:bird,className:\"trump-bird\",alt:\"logo\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"grid-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"left-panel\"},/*#__PURE__*/React.createElement(\"p\",{className:\"desc\"},\"Using a corpus of the entire collection of Donald Trump's Tweets, this app generates a Markov chain.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"desc\"},\"From the Markov model, a sentence (or Tweet in this case) is created.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"desc\"},\"The fake Tweet generated from the Markov chain is placed amongst two real Tweets randomly selected from Donald Trump's entire Tweet history.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"desc\"},\"Can you pick the fake Tweet?\")),/*#__PURE__*/React.createElement(\"div\",{className:\"tweet-container\"},/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this4.counter(0);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[0]})),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this4.counter(1);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[1]})),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){return _this4.counter(2);}},/*#__PURE__*/React.createElement(TweetBox,{text:this.state.allTweets[2]}))),/*#__PURE__*/React.createElement(\"div\",{className:\"right-panel\"},/*#__PURE__*/React.createElement(\"p\",{className:\"acc\"},\"Accuracy: \",this.state.accuracy,\"%\"),/*#__PURE__*/React.createElement(\"p\",null,\"Correct: \",this.state.correct,\"   Total: \",this.state.total),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"button\",{className:\"reload-button\",onClick:function onClick(){return _this4.getTweets();}},\" Reload \"))));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js"],"names":["React","Component","useState","useEffect","bird","TweetBox","App","props","state","fakeTweet","correct","total","accuracy","allTweets","getTweets","fetch","then","res","json","data","setState","tweet","random","num","setAccuracy","toPrecision","console","log","counter"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\n\n\n\n\n// function App() {\n\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n\n\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n\n//   const [allTweets, setAllTweets] = useState([]);\n\n\n\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n\n\n\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n\n\n\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n\n\n//   function returnTest(){\n//     return (allTweets);\n\n//   }\n\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n\n\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n\n\n//             <p>Total: {total} </p>\n//           </div>\n\n\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n\n//         </div>\n//     </div>\n\n//   );\n// }\n\n\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        fakeTweet: '',\n        correct: 0,\n        total: 0,\n        accuracy: 0,\n        allTweets: []    \n      };\n    }\n\n    componentDidMount(){\n      this.getTweets();\n      // fetch('/tweet').then(res => res.json()).then(data => {\n      //   // this.setState({fakeTweet: data.tweet});\n      //   this.state.allTweets.push(data.tweet);\n\n      // });\n\n      // fetch('/random').then(res => res.json()).then(data => {\n      //   this.state.allTweets.push(data.random);\n      // });\n\n      // fetch('/random').then(res => res.json()).then(data => {\n      //   this.state.allTweets.push(data.random);\n      // });\n\n      // console.log(this.state.allTweets)\n   }\n\n  \n  \n\n    getTweets(){\n        fetch('/tweet').then(res => res.json()).then(data => {\n          this.setState({fakeTweet: data.tweet});\n          // this.setState({allTweets[0]: data.tweet})\n          this.state.allTweets[0]=(data.tweet);\n\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.state.allTweets[1]=(data.random);\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.state.allTweets[2]=(data.random);\n        });\n\n        // this.state.allTweets.sort(() => 0.5 - Math.random());\n\n\n        // this.state.allTweets.push(this.state.fakeTweet);\n\n        // this.setState(_.shuffle(this.state.allTweets));\n        // setAllTweets([fakeTweet, random, random2]);\n    }\n\n\n\n    counter(num){\n\n      if (this.state.allTweets[num] === this.state.fakeTweet){\n        this.setState({correct: this.state.correct+1});\n      }\n\n      this.setState({total: this.state.total+1});\n      this.setAccuracy();\n    }\n\n    setAccuracy(){\n      \n      var num = (this.state.total === 0) ? 0 : (((this.state.correct/this.state.total)*100).toPrecision(4));\n      this.setState({accuracy: num});\n    }\n\n \n\n    renderTweetBox(){\n      console.log(this.state.allTweets);\n\n        // this.getTweets();\n        return (\n            <div className=\"tweet-container\">   \n                {/* <TweetBox onClick={()=> this.counter(0)} text={this.state.allTweets[0]}/>\n                <TweetBox onClick={()=> this.counter(1)} text={this.state.allTweets[1]}/>\n                <TweetBox onClick={()=> this.counter(2)} text={this.state.allTweets[2]}/> */}\n\n              <div onClick={()=> this.counter(0)}>\n                <TweetBox text={this.state.allTweets[0]}/>\n              </div> \n\n              <div onClick={()=> this.counter(1)}>\n                < TweetBox text={this.state.allTweets[1]}/>\n              </div>\n\n              <div onClick={()=> this.counter(2)}>\n                <TweetBox text={this.state.allTweets[2]}/>\n              </div>\n            </div>\n          );\n        \n    }\n\n\n    render (){\n      return (\n\n          <div className=\"App\">\n            <header className=\"header\">\n              <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n            </header>\n\n\n            <div className=\"grid-container\">\n                <div className=\"left-panel\">\n                  <p className=\"desc\">\n                    Using a corpus of the entire collection of\n                    Donald Trump's Tweets, this app generates a Markov chain. \n                  </p>\n\n                  <p className=\"desc\">\n                    From the Markov model, a sentence (or Tweet in this case)\n                    is created.\n\n                  </p>\n\n                  <p className=\"desc\">\n                    The fake Tweet generated from the Markov chain is placed\n                    amongst two real Tweets randomly selected from Donald Trump's \n                    entire Tweet history.\n                  </p>\n\n                  <p className=\"desc\">\n                  Can you pick the fake Tweet?\n                  </p>\n\n                </div>\n\n                <div className=\"tweet-container\">   \n      \n                  <div onClick={()=> this.counter(0)}>\n                    <TweetBox text={this.state.allTweets[0]}/>\n                  </div> \n\n                  <div onClick={()=> this.counter(1)}>\n                    < TweetBox text={this.state.allTweets[1]}/>\n                  </div>\n\n                  <div onClick={()=> this.counter(2)}>\n                    <TweetBox text={this.state.allTweets[2]}/>\n                  </div>\n               </div>\n\n                {/* {this.renderTweetBox()} */}\n\n                {/* <div className=\"tweet-container\">\n                 <TweetBox text={this.state.fakeTweet}/>\n\n                 {this.renderTweetBox()}\n\n\n\n                </div> */}\n\n                <div className=\"right-panel\">\n                    <p className=\"acc\">\n                      Accuracy: {this.state.accuracy}%\n                    </p>\n                    <p>\n                      Correct: {this.state.correct}   Total: {this.state.total} \n                    </p>\n\n                    <br></br>\n\n                    <button className=\"reload-button\" onClick={() => this.getTweets()}> Reload </button>      \n                 \n                </div>\n\n              </div>\n          </div>\n      );\n    }\n  } \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}