{"ast":null,"code":"var _jsxFileName = \"/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox'; // function App() {\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n//   const [allTweets, setAllTweets] = useState([]);\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n//   function returnTest(){\n//     return (allTweets);\n//   }\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n//             <p>Total: {total} </p>\n//           </div>\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n//         </div>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fakeTweet: '',\n      correct: 0,\n      total: 0,\n      accuracy: 0,\n      allTweets: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTweets(); // fetch('/tweet').then(res => res.json()).then(data => {\n    //   // this.setState({fakeTweet: data.tweet});\n    //   this.state.allTweets.push(data.tweet);\n    // });\n    // fetch('/random').then(res => res.json()).then(data => {\n    //   this.state.allTweets.push(data.random);\n    // });\n    // fetch('/random').then(res => res.json()).then(data => {\n    //   this.state.allTweets.push(data.random);\n    // });\n    // console.log(this.state.allTweets)\n  }\n\n  getTweets() {\n    fetch('/tweet').then(res => res.json()).then(data => {\n      this.setState({\n        fakeTweet: data.tweet\n      }); // this.setState({allTweets[0]: data.tweet})\n\n      this.state.allTweets[0] = data.tweet;\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.state.allTweets[1] = data.random;\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.state.allTweets[2] = data.random;\n    }); // this.state.allTweets.sort(() => 0.5 - Math.random());\n    // this.state.allTweets.push(this.state.fakeTweet);\n    // this.setState(_.shuffle(this.state.allTweets));\n    // setAllTweets([fakeTweet, random, random2]);\n  }\n\n  counter(num) {\n    if (this.state.allTweets[num] === this.state.fakeTweet) {\n      this.setState({\n        correct: this.state.correct + 1\n      });\n    }\n\n    this.setState({\n      total: this.state.total + 1\n    });\n    this.setAccuracy();\n  }\n\n  setAccuracy() {\n    var num = this.state.total === 0 ? 0 : (this.state.correct / this.state.total * 100).toPrecision(4);\n    this.setState({\n      accuracy: num\n    });\n  }\n\n  renderTweetBox() {\n    console.log(this.state.allTweets); // this.getTweets();\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tweet-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: bird,\n      className: \"trump-bird\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }, \"Using a corpus of the entire collection of Donald Trump's Tweets, this app generates a Markov chain.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 19\n      }\n    }, \"From the Markov model, a sentence (or Tweet in this case) is created.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 19\n      }\n    }, \"The fake Tweet generated from the Markov chain is placed amongst two real Tweets randomly selected from Donald Trump's entire Tweet history.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 19\n      }\n    }, \"Can you pick the fake Tweet?\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tweet-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"acc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }\n    }, \"Accuracy: \", this.state.accuracy, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 21\n      }\n    }, \"Correct: \", this.state.correct, \"  \\xA0 Total: \", this.state.total), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"reload-button\",\n      onClick: () => this.getTweets(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }, \" Reload \"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js"],"names":["React","Component","useState","useEffect","bird","TweetBox","App","constructor","props","state","fakeTweet","correct","total","accuracy","allTweets","componentDidMount","getTweets","fetch","then","res","json","data","setState","tweet","random","counter","num","setAccuracy","toPrecision","renderTweetBox","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\n\n\n\n\n// function App() {\n\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n\n\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n\n//   const [allTweets, setAllTweets] = useState([]);\n\n\n\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n\n\n\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n\n\n\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n\n\n//   function returnTest(){\n//     return (allTweets);\n\n//   }\n\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n\n\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n\n\n//             <p>Total: {total} </p>\n//           </div>\n\n\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n\n//         </div>\n//     </div>\n\n//   );\n// }\n\n\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        fakeTweet: '',\n        correct: 0,\n        total: 0,\n        accuracy: 0,\n        allTweets: []    \n      };\n    }\n\n    componentDidMount(){\n      this.getTweets();\n      // fetch('/tweet').then(res => res.json()).then(data => {\n      //   // this.setState({fakeTweet: data.tweet});\n      //   this.state.allTweets.push(data.tweet);\n\n      // });\n\n      // fetch('/random').then(res => res.json()).then(data => {\n      //   this.state.allTweets.push(data.random);\n      // });\n\n      // fetch('/random').then(res => res.json()).then(data => {\n      //   this.state.allTweets.push(data.random);\n      // });\n\n      // console.log(this.state.allTweets)\n   }\n\n  \n  \n\n    getTweets(){\n        fetch('/tweet').then(res => res.json()).then(data => {\n          this.setState({fakeTweet: data.tweet});\n          // this.setState({allTweets[0]: data.tweet})\n          this.state.allTweets[0]=(data.tweet);\n\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.state.allTweets[1]=(data.random);\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.state.allTweets[2]=(data.random);\n        });\n\n        // this.state.allTweets.sort(() => 0.5 - Math.random());\n\n\n        // this.state.allTweets.push(this.state.fakeTweet);\n\n        // this.setState(_.shuffle(this.state.allTweets));\n        // setAllTweets([fakeTweet, random, random2]);\n    }\n\n\n\n    counter(num){\n\n      if (this.state.allTweets[num] === this.state.fakeTweet){\n        this.setState({correct: this.state.correct+1});\n      }\n\n      this.setState({total: this.state.total+1});\n      this.setAccuracy();\n    }\n\n    setAccuracy(){\n      \n      var num = (this.state.total === 0) ? 0 : (((this.state.correct/this.state.total)*100).toPrecision(4));\n      this.setState({accuracy: num});\n    }\n\n \n\n    renderTweetBox(){\n      console.log(this.state.allTweets);\n\n        // this.getTweets();\n        return (\n            <div className=\"tweet-container\">   \n                {/* <TweetBox onClick={()=> this.counter(0)} text={this.state.allTweets[0]}/>\n                <TweetBox onClick={()=> this.counter(1)} text={this.state.allTweets[1]}/>\n                <TweetBox onClick={()=> this.counter(2)} text={this.state.allTweets[2]}/> */}\n\n              <div onClick={()=> this.counter(0)}>\n                <TweetBox text={this.state.allTweets[0]}/>\n              </div> \n\n              <div onClick={()=> this.counter(1)}>\n                < TweetBox text={this.state.allTweets[1]}/>\n              </div>\n\n              <div onClick={()=> this.counter(2)}>\n                <TweetBox text={this.state.allTweets[2]}/>\n              </div>\n            </div>\n          );\n        \n    }\n\n\n    render (){\n      return (\n\n          <div className=\"App\">\n            <header className=\"header\">\n              <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n            </header>\n\n\n            <div className=\"grid-container\">\n                <div className=\"left-panel\">\n                  <p className=\"desc\">\n                    Using a corpus of the entire collection of\n                    Donald Trump's Tweets, this app generates a Markov chain. \n                  </p>\n\n                  <p className=\"desc\">\n                    From the Markov model, a sentence (or Tweet in this case)\n                    is created.\n\n                  </p>\n\n                  <p className=\"desc\">\n                    The fake Tweet generated from the Markov chain is placed\n                    amongst two real Tweets randomly selected from Donald Trump's \n                    entire Tweet history.\n                  </p>\n\n                  <p className=\"desc\">\n                  Can you pick the fake Tweet?\n                  </p>\n\n                </div>\n\n                <div className=\"tweet-container\">   \n      \n                  <div onClick={()=> this.counter(0)}>\n                    <TweetBox text={this.state.allTweets[0]}/>\n                  </div> \n\n                  <div onClick={()=> this.counter(1)}>\n                    < TweetBox text={this.state.allTweets[1]}/>\n                  </div>\n\n                  <div onClick={()=> this.counter(2)}>\n                    <TweetBox text={this.state.allTweets[2]}/>\n                  </div>\n               </div>\n\n                {/* {this.renderTweetBox()} */}\n\n                {/* <div className=\"tweet-container\">\n                 <TweetBox text={this.state.fakeTweet}/>\n\n                 {this.renderTweetBox()}\n\n\n\n                </div> */}\n\n                <div className=\"right-panel\">\n                    <p className=\"acc\">\n                      Accuracy: {this.state.accuracy}%\n                    </p>\n                    <p>\n                      Correct: {this.state.correct}  &nbsp; Total: {this.state.total} \n                    </p>\n\n                    <br></br>\n\n                    <button className=\"reload-button\" onClick={() => this.getTweets()}> Reload </button>      \n                 \n                </div>\n\n              </div>\n          </div>\n      );\n    }\n  } \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}