{"ast":null,"code":"var _jsxFileName = \"/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox'; // function App() {\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n//   const [allTweets, setAllTweets] = useState([]);\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n//       });\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n//   function returnTest(){\n//     return (allTweets);\n//   }\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n//             <p>Total: {total} </p>\n//           </div>\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n//         </div>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fakeTweet: '',\n      firstRandom: '',\n      secondRandom: '',\n      correct: 0,\n      total: 0,\n      accuracy: 0,\n      allTweets: []\n    };\n  } // state = {\n  //   fakeTweet: '',\n  //   random: '',\n  //   random2: '',\n  //   correct: 0,\n  //   total: 0,\n  //   accuracy: 0,\n  //   allTweets: [],    \n  // };\n\n\n  componentDidMount() {\n    this.getTweets();\n  }\n\n  getTweets() {\n    fetch('/tweet').then(res => res.json()).then(data => {\n      this.setState({\n        fakeTweet: data.tweet\n      });\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.setState({\n        firstRandom: data.tweet\n      });\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.setState({\n        secondRandom: data.tweet\n      });\n    }); // setAllTweets([fakeTweet, random, random2]);\n  }\n\n  counter() {\n    console.log(\"test\");\n    this.setState({\n      total: this.state.total + 1\n    });\n  }\n\n  returnTest() {\n    return this.state.allTweets;\n  }\n\n  renderTweetBox(text) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: bird,\n      className: \"trump-bird\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"font20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    }, \"Using a corpus of the entire collection of Donald Trump's Tweets, a Tweet in the\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"font20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, \"The fake Tweet generated from the Markov chain is placed amongst two real Tweets randomly selected from Donald Trump's entire Tweet history.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"font20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 19\n      }\n    }, \"Can you pick the fake Tweet?\", this.returnTest()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, \"Total: \", this.state.total, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tweet-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, this.renderTweetBox(this.state.fakeTweet), console.log(this.state.random), this.renderTweetBox(this.state.random), this.renderTweetBox(this.state.random2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"reload-button\",\n      onClick: () => this.getTweets(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, \" Reload \"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js"],"names":["React","Component","useState","useEffect","bird","TweetBox","App","constructor","props","state","fakeTweet","firstRandom","secondRandom","correct","total","accuracy","allTweets","componentDidMount","getTweets","fetch","then","res","json","data","setState","tweet","counter","console","log","returnTest","renderTweetBox","text","render","random","random2"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\n\n\n\n\n// function App() {\n\n//   const [fakeTweet, setFakeTweet] = useState(\"\");\n//   const [random, setRandom] = useState(\"\");\n//   const [random2, setRandom2] = useState(\"\");\n\n\n//   const [correct, setCorrect] = useState(0);\n//   const [total, setTotal] = useState(0);\n//   const [accuracy, setAccuracy] = useState(0);\n\n//   const [allTweets, setAllTweets] = useState([]);\n\n\n\n//   function getTweets(){\n//       fetch('/tweet').then(res => res.json()).then(data => {\n//         setFakeTweet(data.tweet);\n//         setAllTweets([data.tweet]);\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n//       fetch('/random').then(res => res.json()).then(data => {\n//         setRandom2(data.random);\n//         setAllTweets(allTweets => [...allTweets, data.tweet]);\n\n//       });\n\n\n//       // setAllTweets([fakeTweet, random, random2]);\n//   }\n\n\n\n//   useEffect(() => {\n//     getTweets();\n//   }, []);\n\n\n\n//   function counter(){\n//     console.log(\"test\")\n//     setTotal(total+1);\n//   }\n\n\n//   function returnTest(){\n//     return (allTweets);\n\n//   }\n\n//   function renderTweetBox(text){\n//     return (\n//         <div onClick={()=> counter()}>\n//           <TweetBox text={text}/>\n//         </div>\n//       );\n//   }\n\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"header\">\n//         <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n//       </header>\n\n\n//       <div className=\"grid-container\">\n//           <div className=\"left-panel\">\n//             <p className=\"font20\">\n//               Using a corpus of the entire collection of\n//               Donald Trump's Tweets, a Tweet in the  \n//             </p>\n\n//             <p className=\"font20\">\n//               The fake Tweet generated from the Markov chain is placed\n//               amongst two real Tweets randomly selected from Donald Trump's \n//               entire Tweet history.\n//             </p>\n\n//             <p className=\"font20\">\n//              Can you pick the fake Tweet?\n//              {returnTest()}\n//             </p>\n\n\n//             <p>Total: {total} </p>\n//           </div>\n\n\n//           <div className=\"tweet-container\">\n//             {renderTweetBox(fakeTweet)}\n//             {renderTweetBox(random)}\n//             {renderTweetBox(random2)}\n//           </div>\n\n//           <div className=\"right-panel\">\n//               <button className=\"reload-button\" onClick={() => getTweets()}> Reload </button>      \n//           </div>\n\n//         </div>\n//     </div>\n\n//   );\n// }\n\n\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n\n        fakeTweet: '',\n        firstRandom: '',\n        secondRandom: '',\n        correct: 0,\n        total: 0,\n        accuracy: 0,\n        allTweets: [],    \n      };\n    }\n\n    // state = {\n    //   fakeTweet: '',\n    //   random: '',\n    //   random2: '',\n    //   correct: 0,\n    //   total: 0,\n    //   accuracy: 0,\n    //   allTweets: [],    \n    // };\n    componentDidMount(){\n      this.getTweets();\n    }\n  \n\n\n\n    getTweets(){\n        fetch('/tweet').then(res => res.json()).then(data => {\n          this.setState({fakeTweet: data.tweet});\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.setState({firstRandom: data.tweet});\n\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.setState({secondRandom: data.tweet});\n        });\n\n\n        // setAllTweets([fakeTweet, random, random2]);\n    }\n\n\n\n    counter(){\n      console.log(\"test\")\n      this.setState({total: this.state.total+1});\n    }\n\n\n    returnTest(){\n      return (this.state.allTweets);\n    }\n\n    renderTweetBox(text){\n      return (\n          <div onClick={()=> this.counter()}>\n            <TweetBox text={text}/>\n          </div>\n        );\n    }\n\n\n    render (){\n\n      return (\n          <div className=\"App\">\n            <header className=\"header\">\n              <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n            </header>\n\n\n            <div className=\"grid-container\">\n                <div className=\"left-panel\">\n                  <p className=\"font20\">\n                    Using a corpus of the entire collection of\n                    Donald Trump's Tweets, a Tweet in the  \n                  </p>\n\n                  <p className=\"font20\">\n                    The fake Tweet generated from the Markov chain is placed\n                    amongst two real Tweets randomly selected from Donald Trump's \n                    entire Tweet history.\n                  </p>\n\n                  <p className=\"font20\">\n                  Can you pick the fake Tweet?\n                  {this.returnTest()}\n                  </p>\n\n\n                  <p>Total: {this.state.total} </p>\n                </div>\n\n\n                <div className=\"tweet-container\">\n                  {this.renderTweetBox(this.state.fakeTweet)}\n                  {console.log(this.state.random)}\n                  {this.renderTweetBox(this.state.random)}\n                  {this.renderTweetBox(this.state.random2)}\n                </div>\n\n                <div className=\"right-panel\">\n                    <button className=\"reload-button\" onClick={() => this.getTweets()}> Reload </button>      \n                </div>\n\n              </div>\n          </div>\n      );\n    }\n  } \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}