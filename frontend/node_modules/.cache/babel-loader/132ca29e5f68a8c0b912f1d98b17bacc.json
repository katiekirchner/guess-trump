{"ast":null,"code":"var _jsxFileName = \"/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js\";\nimport React, { Component, useState, useEffect } from 'react'; // import React from 'react';\n\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\nvar shuffle = require('shuffle-array');\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fakeTweet: \" \",\n      correct: 0,\n      total: 0,\n      accuracy: 0,\n      allTweets: [\" \", \" \", \" \"]\n    };\n  }\n\n  componentDidMount() {\n    this.getTweets();\n    this.renderTweetBox();\n    console.log(\"Comp: \", this.state.allTweets);\n    console.log(\"Comp1: \", this.state.allTweets[0]);\n    console.log(\"Comp2: \", this.state.allTweets[1]);\n    console.log(\"Comp3: \", this.state.allTweets[2]);\n    shuffle(this.state.allTweets);\n  }\n\n  getFakeTweet() {\n    fetch('/tweet').then(res => res.json()).then(data => {\n      this.setState({\n        fakeTweet: \"FAKE !! --- \" + data.tweet\n      });\n    });\n  }\n\n  getRandTweets() {\n    this.setState({\n      allTweets: [\" \", \" \", \" \"]\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.state.allTweets[1] = data.random;\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.state.allTweets[2] = data.random;\n    });\n  }\n\n  getTweets() {\n    fetch('/tweet').then(res => res.json()).then(data => {\n      this.setState({\n        fakeTweet: \"FAKE!! -- \" + data.tweet\n      });\n      this.state.allTweets[0] = data.tweet; // this.state.allTweets[0]=(this.state.fakeTweet);\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      // this.setState({fakeTweet[1]:data.random });\n      this.state.allTweets[1] = data.random;\n    });\n    fetch('/random').then(res => res.json()).then(data => {\n      this.state.allTweets[2] = data.random;\n    });\n    this.setState({\n      fakeTweet: this.state.allTweets[0]\n    });\n    shuffle(this.state.allTweets);\n    shuffle(this.state.allTweets); // this.state.allTweets.sort(() => 0.5 - Math.random());\n    // this.state.allTweets.push(this.state.fakeTweet);\n    // this.setState(_.shuffle(this.state.allTweets));\n    // setAllTweets([fakeTweet, random, random2]);\n  }\n\n  counter(num) {\n    console.log(num, this.state.allTweets[num]);\n    console.log(this.state.fakeTweet);\n    console.log(this.state.allTweets[num] == this.state.fakeTweet);\n\n    if (this.state.allTweets[num] === this.state.fakeTweet) {\n      this.setState({\n        correct: this.state.correct + 1\n      });\n    }\n\n    this.setState({\n      total: this.state.total + 1\n    });\n    this.setAccuracy(); // this.componentDidMount();\n  }\n\n  setAccuracy() {\n    var num = this.state.total === 0 ? 0 : (this.state.correct / this.state.total * 100).toPrecision(4);\n    this.setState({\n      accuracy: num\n    });\n  }\n\n  renderTweetBox() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tweet-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => this.counter(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TweetBox, {\n      text: this.state.allTweets[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: bird,\n      className: \"trump-bird\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, \"Using a corpus of the entire collection of Donald Trump's Tweets, this app generates a Markov chain.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, \"From the Markov model, a sentence (or Tweet in this case) is created.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    }, \"The fake Tweet generated from the Markov chain is placed amongst two real Tweets randomly selected from Donald Trump's entire Tweet history.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 19\n      }\n    }, \"Can you pick the fake Tweet?\")), this.renderTweetBox(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"acc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, \"Accuracy: \", this.state.accuracy, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, \"Correct: \", this.state.correct, \"\\xA0\\xA0\\xA0 Total: \", this.state.total), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"reload-button\",\n      onClick: () => this.getTweets(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, \" Reload \"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/katiekirchner/Sites/guesstrumptweet/frontend/src/App.js"],"names":["React","Component","useState","useEffect","bird","TweetBox","shuffle","require","App","state","fakeTweet","correct","total","accuracy","allTweets","componentDidMount","getTweets","renderTweetBox","console","log","getFakeTweet","fetch","then","res","json","data","setState","tweet","getRandTweets","random","counter","num","setAccuracy","toPrecision","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\n// import React from 'react';\n\nimport './css/App.css';\nimport bird from './component/trumpBird1.png';\nimport TweetBox from './component/tweetBox';\n\nvar shuffle = require('shuffle-array');\n\n\n  class App extends React.Component {\n\n    // constructor(props) {\n    //   super(props);\n    //   this.state = {\n    //     fakeTweet: this.getFakeTweet(),\n    //     correct: 0,\n    //     total: 0,\n    //     accuracy: 0,\n    //     allTweets: [this.getRandTweets()]  \n    //   };\n    // }\n\n    // state = {\n    //     fakeTweet: this.getFakeTweet(),\n    //     correct: 0,\n    //     total: 0,\n    //     accuracy: 0,\n    //     allTweets: [this.getRandTweets()]  \n    // };\n\n    state = {\n      fakeTweet: \" \",\n      correct: 0,\n      total: 0,\n      accuracy: 0,\n      allTweets: [\" \", \" \", \" \"]  \n    };\n  \n    \n\n    componentDidMount(){\n      \n      this.getTweets();\n      this.renderTweetBox();\n\n      console.log(\"Comp: \", this.state.allTweets)\n      console.log(\"Comp1: \", this.state.allTweets[0])\n      console.log(\"Comp2: \", this.state.allTweets[1])\n      console.log(\"Comp3: \", this.state.allTweets[2])\n\n      shuffle(this.state.allTweets);\n   }\n\n\n\n   getFakeTweet(){\n      fetch('/tweet').then(res => res.json()).then(data => {\n        this.setState({fakeTweet: \"FAKE !! --- \" + data.tweet})\n      });\n   }\n  \n   getRandTweets(){\n     this.setState({allTweets: [\" \", \" \", \" \"]})\n\n      fetch('/random').then(res => res.json()).then(data => {\n        this.state.allTweets[1]=(data.random);\n      });\n\n      fetch('/random').then(res => res.json()).then(data => {\n        this.state.allTweets[2]=(data.random);\n      });\n   }\n  \n\n    getTweets(){\n        fetch('/tweet').then(res => res.json()).then(data => {\n          this.setState({fakeTweet: \"FAKE!! -- \" + data.tweet});\n          this.state.allTweets[0]=(data.tweet);\n\n          // this.state.allTweets[0]=(this.state.fakeTweet);\n\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          // this.setState({fakeTweet[1]:data.random });\n          this.state.allTweets[1]=(data.random);\n        });\n\n        fetch('/random').then(res => res.json()).then(data => {\n          this.state.allTweets[2]=(data.random);\n        });\n        \n        this.setState({fakeTweet: this.state.allTweets[0]});\n\n\n        shuffle(this.state.allTweets);\n        shuffle(this.state.allTweets);\n\n        \n        // this.state.allTweets.sort(() => 0.5 - Math.random());\n\n\n        // this.state.allTweets.push(this.state.fakeTweet);\n\n        // this.setState(_.shuffle(this.state.allTweets));\n        // setAllTweets([fakeTweet, random, random2]);\n    }\n\n\n\n    counter(num){\n      console.log(num, this.state.allTweets[num])\n      console.log(this.state.fakeTweet)\n\n      console.log(this.state.allTweets[num] == this.state.fakeTweet)\n\n      if (this.state.allTweets[num] === this.state.fakeTweet){\n        this.setState({correct: this.state.correct+1});\n      }\n\n      this.setState({total: this.state.total+1});\n      this.setAccuracy();\n\n      // this.componentDidMount();\n    }\n\n    setAccuracy(){\n      \n      var num = (this.state.total === 0) ? 0 : (((this.state.correct/this.state.total)*100).toPrecision(4));\n      this.setState({accuracy: num});\n    }\n\n \n\n    renderTweetBox(){\n\n        return (\n            <div className=\"tweet-container\">   \n\n              <div onClick={()=> this.counter(0)}>\n                <TweetBox text={this.state.allTweets[0]}/>\n              </div> \n\n              <div onClick={()=> this.counter(1)}>\n                < TweetBox text={this.state.allTweets[1]}/>\n              </div>\n\n              <div onClick={()=> this.counter(2)}>\n                <TweetBox text={this.state.allTweets[2]}/>\n              </div>\n            </div>\n          );\n        \n    }\n\n\n    render (){\n      return (\n\n          <div className=\"App\">\n            <header className=\"header\">\n              <img src={bird} className=\"trump-bird\" alt=\"logo\" />\n            </header>\n\n\n            <div className=\"grid-container\">\n                <div className=\"left-panel\">\n                  <p className=\"desc\">\n                    Using a corpus of the entire collection of\n                    Donald Trump's Tweets, this app generates a Markov chain. \n                  </p>\n\n                  <p className=\"desc\">\n                    From the Markov model, a sentence (or Tweet in this case)\n                    is created.\n\n                  </p>\n\n                  <p className=\"desc\">\n                    The fake Tweet generated from the Markov chain is placed\n                    amongst two real Tweets randomly selected from Donald Trump's \n                    entire Tweet history.\n                  </p>\n\n                  <p className=\"desc\">\n                  Can you pick the fake Tweet?\n                  </p>\n\n                </div>\n{/* \n                <div className=\"tweet-container\">   \n      \n                  <div onClick={()=> this.counter(0)}>\n                    <TweetBox text={this.state.allTweets[0]}/>\n                  </div> \n\n                  <div onClick={()=> this.counter(1)}>\n                    < TweetBox text={this.state.allTweets[1]}/>\n                  </div>\n\n                  <div onClick={()=> this.counter(2)}>\n                    <TweetBox text={this.state.allTweets[2]}/>\n                  </div>\n               </div> */}\n\n                {this.renderTweetBox()}\n\n                {/* <div className=\"tweet-container\">\n                 <TweetBox text={this.state.fakeTweet}/>\n\n                 {this.renderTweetBox()}\n\n\n\n                </div> */}\n\n                <div className=\"right-panel\">\n                    <p className=\"acc\">\n                      Accuracy: {this.state.accuracy}%\n                    </p>\n                    <p>\n                      Correct: {this.state.correct}  \n                      &nbsp;&nbsp;&nbsp;  \n                      Total: {this.state.total} \n                    </p>\n\n                    <br></br>\n                    {/* <button className=\"reload-button\" onClick={() => this.componentDidMount()}> Reload </button>       */}\n\n                    <button className=\"reload-button\" onClick={() => this.getTweets()}> Reload </button>      \n                 \n                </div>\n\n              </div>\n          </div>\n      );\n    }\n  } \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}